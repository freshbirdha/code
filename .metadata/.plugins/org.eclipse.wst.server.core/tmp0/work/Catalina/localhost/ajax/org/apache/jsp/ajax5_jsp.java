/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.75
 * Generated at: 2023-07-02 12:17:38 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;

public final class ajax5_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/Users/USER/eclipse-workspaceJaveWeb/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/ajax/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1686646816352L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPではGET、POST、またはHEADのみが許可されます。 JasperはOPTIONSも許可しています。");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\r\n");
      out.write("<html>\r\n");
      out.write("  <head>\r\n");
      out.write("    <title>My JSP 'ajax5.jsp' starting page</title>\r\n");
      out.write("    \r\n");
      out.write("	<meta http-equiv=\"pragma\" content=\"no-cache\">\r\n");
      out.write("	<meta http-equiv=\"cache-control\" content=\"no-cache\">\r\n");
      out.write("	<meta http-equiv=\"expires\" content=\"0\">    \r\n");
      out.write("	<meta http-equiv=\"keywords\" content=\"keyword1,keyword2,keyword3\">\r\n");
      out.write("	<meta http-equiv=\"description\" content=\"This is my page\">\r\n");
      out.write("	<!--\r\n");
      out.write("	<link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\r\n");
      out.write("	-->\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("function createXMLHttpRequest() {\r\n");
      out.write("	try {\r\n");
      out.write("		return new XMLHttpRequest();//大多数浏览器\r\n");
      out.write("	} catch (e) {\r\n");
      out.write("		try {\r\n");
      out.write("			return ActvieXObject(\"Msxml2.XMLHTTP\");//IE6.0\r\n");
      out.write("		} catch (e) {\r\n");
      out.write("			try {\r\n");
      out.write("				return ActvieXObject(\"Microsoft.XMLHTTP\");//IE5.5及更早版本	\r\n");
      out.write("			} catch (e) {\r\n");
      out.write("				alert(\"哥们儿，您用的是什么浏览器啊？\");\r\n");
      out.write("				throw e;\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("}\r\n");
      out.write("/*\r\n");
      out.write(" * 1. 在文档加载完毕时发送请求，得到所有省份名称，显示在<select name=\"province\"/>中\r\n");
      out.write(" * 2. 在选择了新的省份时，发送请求（参数为省名称），得到xml文档，即<province>元素\r\n");
      out.write(" *   解析xml文档，得到其中所有的<city>，再得到每个<city>元素的内容，即市名，使用市名生成<option>，插入到<select name=\"city\">元素中\r\n");
      out.write(" */\r\n");
      out.write("\r\n");
      out.write("window.onload = function() {\r\n");
      out.write("	/*\r\n");
      out.write("	ajax四步，请求ProvinceServlet，得到所有省份名称\r\n");
      out.write("	使用每个省份名称创建一个<option>元素，添加到<select name=\"province\">中\r\n");
      out.write("	*/\r\n");
      out.write("	var xmlHttp = createXMLHttpRequest();\r\n");
      out.write("	xmlHttp.open(\"GET\", \"");
      if (_jspx_meth_c_005furl_005f0(_jspx_page_context))
        return;
      out.write("\", true);\r\n");
      out.write("	xmlHttp.send(null);\r\n");
      out.write("	xmlHttp.onreadystatechange = function() {\r\n");
      out.write("		if(xmlHttp.readyState == 4 && xmlHttp.status == 200) {\r\n");
      out.write("			// 获取服务器的响应\r\n");
      out.write("			var text = xmlHttp.responseText;\r\n");
      out.write("			// 使用逗号分隔它，得到数组\r\n");
      out.write("			var arr = text.split(\",\");\r\n");
      out.write("			// 循环遍历每个省份名称，每个名称生成一个option对象，添加到<select>中\r\n");
      out.write("			for(var i = 0; i < arr.length; i++) {\r\n");
      out.write("				var op = document.createElement(\"option\");//创建一个指名名称元素\r\n");
      out.write("				op.value = arr[i];//设置op的实际值为当前的省份名称\r\n");
      out.write("				var textNode = document.createTextNode(arr[i]);//创建文本节点\r\n");
      out.write("				op.appendChild(textNode);//把文本子节点添加到op元素中，指定其显示值\r\n");
      out.write("				\r\n");
      out.write("				document.getElementById(\"p\").appendChild(op);\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("	};\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	/*\r\n");
      out.write("	第二件事情：给<select name=\"province\">添加改变监听\r\n");
      out.write("	使用选择的省份名称请求CityServlet，得到<province>元素(xml元素)！！！\r\n");
      out.write("	获取<province>元素中所有的<city>元素，遍历之！获取每个<city>的文本内容，即市名称\r\n");
      out.write("	使用每个市名称创建<option>元素添加到<select name=\"city\">\r\n");
      out.write("	*/\r\n");
      out.write("	var proSelect = document.getElementById(\"p\");\r\n");
      out.write("	proSelect.onchange = function() {\r\n");
      out.write("		var xmlHttp = createXMLHttpRequest();\r\n");
      out.write("		xmlHttp.open(\"POST\", \"");
      if (_jspx_meth_c_005furl_005f1(_jspx_page_context))
        return;
      out.write("\", true);\r\n");
      out.write("		xmlHttp.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n");
      out.write("		xmlHttp.send(\"pname=\" + proSelect.value);//把下拉列表中选择的值发送给服务器！\r\n");
      out.write("		xmlHttp.onreadystatechange = function() {\r\n");
      out.write("			if(xmlHttp.readyState == 4 && xmlHttp.status == 200) {\r\n");
      out.write("				/*\r\n");
      out.write("				把select中的所有option移除（除了请选择）\r\n");
      out.write("				*/\r\n");
      out.write("				var citySelect = document.getElementById(\"c\");\r\n");
      out.write("				// 获取其所有子元素\r\n");
      out.write("				var optionEleList = citySelect.getElementsByTagName(\"option\");\r\n");
      out.write("				// 循环遍历每个option元素，然后在citySelect中移除\r\n");
      out.write("				while(optionEleList.length > 1) {//子元素的个数如果大于1就循环，等于1就不循环了！\r\n");
      out.write("					citySelect.removeChild(optionEleList[1]);//总是删除1下标，因为1删除了，2就变成1了！\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				\r\n");
      out.write("				var doc = xmlHttp.responseXML;\r\n");
      out.write("				// 得到所有名为city的元素\r\n");
      out.write("				var cityEleList = doc.getElementsByTagName(\"city\");\r\n");
      out.write("				// 循环遍历每个city元素\r\n");
      out.write("				for(var i = 0; i < cityEleList.length; i++) {\r\n");
      out.write("					var cityEle = cityEleList[i];//得到每个city元素\r\n");
      out.write("					var cityName;\r\n");
      out.write("					// 获取市名称\r\n");
      out.write("					if(window.addEventListener) {//处理浏览器的差异\r\n");
      out.write("						cityName = cityEle.textContent;//支持FireFox等浏览器\r\n");
      out.write("					} else {\r\n");
      out.write("						cityName = cityEle.text;//支持IE\r\n");
      out.write("					}\r\n");
      out.write("					\r\n");
      out.write("					// 使用市名称创建option元素，添加到<select name=\"city\">中\r\n");
      out.write("					var op = document.createElement(\"option\");\r\n");
      out.write("					op.value = cityName;\r\n");
      out.write("					// 创建文本节点\r\n");
      out.write("					var textNode = document.createTextNode(cityName);\r\n");
      out.write("					op.appendChild(textNode);//把文本节点追加到op元素中\r\n");
      out.write("					\r\n");
      out.write("					//把op添加到<select>元素中\r\n");
      out.write("					citySelect.appendChild(op);\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("		};		\r\n");
      out.write("	};\r\n");
      out.write("};\r\n");
      out.write("</script>\r\n");
      out.write("  </head>\r\n");
      out.write("  \r\n");
      out.write("  <body>\r\n");
      out.write("<h1>省市联动</h1>\r\n");
      out.write("<select name=\"province\" id=\"p\">\r\n");
      out.write("  <option>===请选择省===</option>\r\n");
      out.write("</select>\r\n");
      out.write("　　　\r\n");
      out.write("<select name=\"city\" id=\"c\">\r\n");
      out.write("  <option>===请选择市===</option>\r\n");
      out.write("</select>\r\n");
      out.write("  </body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005furl_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:url
    org.apache.taglibs.standard.tag.rt.core.UrlTag _jspx_th_c_005furl_005f0 = (org.apache.taglibs.standard.tag.rt.core.UrlTag) _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.UrlTag.class);
    boolean _jspx_th_c_005furl_005f0_reused = false;
    try {
      _jspx_th_c_005furl_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005furl_005f0.setParent(null);
      // /ajax5.jsp(47,22) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005furl_005f0.setValue("/ProvinceServlet");
      int _jspx_eval_c_005furl_005f0 = _jspx_th_c_005furl_005f0.doStartTag();
      if (_jspx_th_c_005furl_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f0);
      _jspx_th_c_005furl_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005furl_005f0, _jsp_getInstanceManager(), _jspx_th_c_005furl_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005furl_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:url
    org.apache.taglibs.standard.tag.rt.core.UrlTag _jspx_th_c_005furl_005f1 = (org.apache.taglibs.standard.tag.rt.core.UrlTag) _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.UrlTag.class);
    boolean _jspx_th_c_005furl_005f1_reused = false;
    try {
      _jspx_th_c_005furl_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005furl_005f1.setParent(null);
      // /ajax5.jsp(77,24) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005furl_005f1.setValue("/CityServlet");
      int _jspx_eval_c_005furl_005f1 = _jspx_th_c_005furl_005f1.doStartTag();
      if (_jspx_th_c_005furl_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f1);
      _jspx_th_c_005furl_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005furl_005f1, _jsp_getInstanceManager(), _jspx_th_c_005furl_005f1_reused);
    }
    return false;
  }
}
